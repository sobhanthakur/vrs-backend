imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@AppBundle/Resources/config/services.yml" }

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en

framework:
    #esi: ~
    translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true
    templating:
            engines: ['twig']
    cache:
      directory: '%kernel.cache_dir%/pools'
      default_redis_provider: 'redis://localhost'

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_sqlsrv
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        MultipleActiveResultSets: true
        types:
              datetime:
                  class: AppBundle\CustomClasses\DateTime
                  commented: false

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

fos_rest:
    param_fetcher_listener: true
    body_listener: true
    format_listener: ~
    allowed_methods_listener: true
    view:
        view_response_listener: 'force'
        formats:
            rss: false
            json: true
            xml: true
        templating_formats:
            html: true
        force_redirects:
            html: true
        failed_validation: HTTP_BAD_REQUEST
        default_engine: php
    service:
        serializer: ~
    serializer:
        serialize_null: true


sensio_framework_extra:
   router:
        annotations: false

jms_serializer:
    visitors:
        json:
            options: JSON_UNESCAPED_UNICODE

nelmio_api_doc:
    documentation:
            host: '%api_host%'
            schemes: [http, https]
            info:
                title: VRScheduler
                version: 1.0.0
                description: VRScheduler API documentation
            securityDefinitions:
              AuthToken:
                    type: apiKey
                    description: 'value: VRS {jwt}'
                    name: Authorization
                    in: header
            security:
                - AuthToken: []
    areas:
        default:
            path_patterns: # an array of regexps
                - ^/api

        integrationportal:
            path_patterns:
                - /v1/vrs/qwc/file/export
                - /v1/vrs/integrations
                - /v1/vrs/qwc/register
                - /v1/vrs/oauth/validate
                - /v1/vrs/oauth/refresh
                - /v1/vrs/propertytags
                - /v1/vrs/regions
                - /v1/vrs/owners
                - /v1/vrs/stafftags
                - /v1/vrs/departments
                - /v1/vrs/property
                - /v1/vrs/properties
                - /v1/vrs/qbdcustomers
                - /v1/vrs/qbdemployees
                - /v1/vrs/staffs
                - /v1/vrs/taskrules
                - /v1/vrs/qbditems
                - /v1/vrs/qbdwageitem
                - /v1/vrs/qbdwageitem
                - /v1/vrs/wageitem
                - /v1/vrs/tasks
                - /v1/vrs/qbdcustomers/map
                - /v1/vrs/qbdemployees/map
                - /v1/vrs/qbdtaskrules/map
                - /v1/vrs/qbditems/map
                - /v1/vrs/qbdbilling/approve
                - /v1/vrs/staff
                - /v1/vrs/timeclockdays
                - /v1/vrs/qbdtimetracking/approve
                - /v1/vrs/qbdsynclogs
                - /v1/vrs/qbdsynclogs/batch
                - /v1/vrs/qbddisconnect
        public_api:
            path_patterns:
                -  /api/v1/oauth/login
                -  /api/v1/oauth/refresh
                -  /api/v1/properties
                -  /api/v1/properties/{id}
                -  /api/v1/owners
                -  /api/v1/regiongroups
                -  /api/v1/regions
                -  /api/v1/propertybookings
                -  /api/v1/propertybookings/{id}
                -  /api/v1/issues
                -  /api/v1/issues/{id}

#snc_redis:
#    clients:
#        default:
#              type: predis
#              alias: default
#              dsn:   "%dsn%"
#
#noxlogic_rate_limit:
#    enabled:              true
#
#    # The storage engine where all the rates will be stored
#    storage_engine:       redis # One of "redis"; "memcache"; "doctrine"; "php_redis"
#
#    # The redis client to use for the redis storage engine
#    redis_client:         default
#
#    # The Redis service, use this if you dont use SncRedisBundle and want to specify a service to use
#    # Should be instance of \Predis\Client
#    redis_service:    null # Example: project.predis
#
#    # The Redis client to use for the php_redis storage engine
#    # Should be an instance of \Redis
#    php_redis_service:    null # Example: project.redis
#
#    # The memcache client to use for the memcache storage engine
#    memcache_client:      default
#
#    # The Memcached service, use this if you dont use LswMemcacheBundle and want to specify a service to use
#    # Should be instance of \Memcached
#    memcache_service:    null # Example: project.memcached
#
#    # The Doctrine Cache provider to use for the doctrine storage engine
#    doctrine_provider:    null # Example: my_apc_cache
#
#    # The Doctrine Cache service, use this if you dont use DoctrineCacheBundle and want to specify a service to use
#    # Should be an instance of \Doctrine\Common\Cache\Cache
#    doctrine_service:    null # Example: project.my_apc_cache
#
#    # The HTTP status code to return when a client hits the rate limit
#    rate_response_code:   429
#
#    # Optional exception class that will be returned when a client hits the rate limit
#    rate_response_exception: AppBundle\CustomClasses\RateLimit
#
#    # The HTTP message to return when a client hits the rate limit
#    rate_response_message:  'You exceeded the rate limit'
#
#    # Should the ratelimit headers be automatically added to the response?
#    display_headers:      true
#
#    # What are the different header names to add
#    headers:
#        limit:                X-RateLimit-Limit
#        remaining:            X-RateLimit-Remaining
#        reset:                X-RateLimit-Reset
#
#    # Rate limits for paths
#    path_limits:
#    #- { path: /api/v1, limit: 5, period: 60 }
#
#    # - { path: /api, limit: 1000, period: 3600 }
#    # - { path: /dashboard, limit: 100, period: 3600, methods: ['GET', 'POST']}
#
#    # Should the FOS OAuthServerBundle listener be enabled
#    fos_oauth_key_listener: true


monolog:
    handlers:
        api:
            type: stream
            path: "%kernel.logs_dir%/apiRequestResponse.log"
            level: debug
            channels: [api]
        exception:
            type: stream
            path: "%kernel.logs_dir%/exception.log"
            level: error
            channels: [exception]
    channels: [api,exception]